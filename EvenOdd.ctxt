#BlueJ class context
comment0.params=
comment0.target=EvenOdd()
comment0.text=\n\ Set\ up\ the\ game\!\n\ Set\ the\ initial\ pile\ to\ 15\ and\ the\ players'\ piles\ to\n\ zero.\n
comment1.params=
comment1.target=void\ switchPlayerMove()
comment1.text=\n\ switchPlayerMove\:\ none-->none\n\ Alternates\ turns\ between\ the\ players,\ called\ from\ within\ each\ move\ function.\n
comment10.params=
comment10.target=int\ getPlayer2()
comment11.params=
comment11.target=int\ getPile()
comment12.params=
comment12.target=int\ getPlayerMove()
comment2.params=amount
comment2.target=boolean\ p1move(int)
comment2.text=\n\ p1move\ \:\ amount\ (int)\ ->\ boolean\n\ \n\ Given\ the\ amount\ to\ move,\ return\ whether\n\ it\ is\ a\ valid\ move\ and\ adjust\ the\ main\ pile\ and\ p1's\ pile\n\ accordingly.\n
comment3.params=amount
comment3.target=boolean\ p2move(int)
comment3.text=\n\ p2move\ \:\ amount\ (int)\ ->\ boolean\n\ \n\ Given\ the\ amount\ to\ move,\ return\ whether\n\ it\ is\ a\ valid\ move\ and\ adjust\ the\ pile\ and\ p2\n\ accordingly.\n
comment4.params=
comment4.target=boolean\ checkGameOver()
comment4.text=\n\ checkGameOver\ \:\ none\ ->\ boolean\n\ \n\ Return\ whether\ or\ not\ the\ game\ is\ over.\n
comment5.params=
comment5.target=java.lang.String\ whoWon()
comment5.text=\n\ whoWon\ \:\ none\ ->\ String\n\ \n\ Return\ which\ player\ won\ and\ increment\ the\ tally.\n
comment6.params=winner
comment6.target=void\ updateTally(int)
comment6.text=\n\ updateTally\:\ winner\ (int)\ -->\ none\n\ \n\ Given\ the\ player\ who\ won,\ update\ their\ tally\ by\ \n\ one\ if\ it\ has\ not\ already\ been\ incremented\ this\ game.\n
comment7.params=
comment7.target=int\ AIMove()
comment7.text=\n\ AIMove\ \:\ none\ -->\ int\n\ \n\ Return\ an\ integer\ indicating\ how\ many\ the\ computer\ takes\ from\ the\ pile.\n\ \n\ Computer\ Difficulty\ 1\:\ Random\ pick\n\ \ \ \ \ \ Picks\ a\ random\ number\ between\ 1\ and\ the\ amount\ in\ the\ pile.\n\ \ \ \ \ \ \n\ Computer\ Difficulty\ 2\:\ Strategic\ pick\n\ \ \ \ \ \ Analyzes\ the\ state\ the\ player\ is\ in\ by\ examining\ how\ many\n\ \ \ \ \ \ are\ left\ in\ the\ pile\ and\ whether\ the\ amount\ currently\ held\ by\n\ \ \ \ \ \ the\ player\ is\ even\ or\ odd.\ By\ doing\ so,\ several\ "no-win"\ scenarios\n\ \ \ \ \ \ are\ revealed.\ Were\ both\ players\ to\ play\ perfect\ games,\ these\ conditions\n\ \ \ \ \ \ would\ always\ lead\ a\ player\ to\ a\ loss.\ The\ AI\ is\ then\ based\ around\ the\ \n\ \ \ \ \ \ idea\ of\ avoiding\ those\ specific\ conditions\ with\ each\ move.\ \n\ \ \ \ \ \ \n\ \ \ \ \ \ The\ winning\ condition\ is\ essentially\ decided\ based\ upon\ the\ state\ of\ the\n\ \ \ \ \ \ player\ (whether\ an\ even\ or\ odd\ amount\ is\ held)\ when\ there\ are\ 4\ or\ 5\ left\ in\n\ \ \ \ \ \ the\ pile\ -\ if\ the\ player\ has\ an\ even\ amount\ when\ it\ is\ their\ turn\ to\ pull\ from\ the\ pile\ and\ there\ are\ \n\ \ \ \ \ \ 5\ remaining,\ there\ is\ no\ possible\ way\ to\ win.\ A\ similar\ condition\ exists\ if\ the\ player\n\ \ \ \ \ \ has\ an\ odd\ amount\ when\ 4\ are\ remaining\ in\ the\ pile.\ The\ rest\ of\ the\ suggested\ moves\ are\ based\ around\n\ \ \ \ \ \ avoiding\ landing\ in\ this\ condition\ as\ well\ as\ forcing\ the\ opponent\ into\ this\ position.\n\ \ \ \ \ \ \n\ \ \ \ \ \ If\ both\ players\ play\ perfect\ games,\ the\ player\ that\ goes\ first\ will\ always\ win.\n\ \ \ \ \ \n\ \ \ \ \ \ The\ no-win\ conditions\ are\ marked.\n\ \ \ \ \ \ \n\ \ \ \ \ \ \n\ \ \ \ \ \ \n
comment8.params=whichPile
comment8.target=int\ getPile(int)
comment8.text=\n\ Getter\ to\ return\ pile\ values\n\ 1\ -->\ Player\ 1's\ pile\n\ 2\ -->\ Player\ 2's\ pile\n\ 0\ -->\ Amount\ left\ in\ pile\n
comment9.params=
comment9.target=int\ getPlayer1()
comment9.text=\n\ Other\ getters\n
numComments=13
